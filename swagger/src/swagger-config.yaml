swagger: '2.0'
info:
  title: Chat - Django REST framework
  description: Authorization must take place via token. Enter the token with the `Bearer` prefix, e.g. "Bearer abcde12345".
  termsOfService: https://www.google.com/policies/terms/
  version: v1
host: localhost:8000
basePath: /api
consumes:
  - application/json
  - multipart/form-data
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >-
      Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".
tags:
  - name: websocket
    description: Instruction to connect websocket
  - name: chats
    description: The chat is needed for grouping messages
  - name: messages
    description: This is what the user sends and receives a response
  - name: users
    description: The model for User
  - name: profiles_user
    description: The Profile for User
  - name: agents
    description: Information containing user data
  - name: nlp_models
    description: Information containing NLP Models data
  - name: profiles_nlp_models
    description: Information containing NLP Model Profiles data
  - name: register
    description: Registering a new user
  - name: token
    description: JWT for authorization
  - name: change password
    description: Change Password
  - name: logout
    description: An endpoint to logout users.
  - name: password-reset
    description: An Api View which provides a method to request a password reset token based on an e-mail address
  - name: confirmation-email
    description: An Api View which provides send and confirm email
paths:
  /websocket/:
    options:
      security:
        - Bearer: [ ]
      summary: Instruction to connect websocket
      description: >-
        For connect to the websocket, you should make the following request: <br>
        ws://localhost:8000/ws/login/?access=**{access_token}** <br>
      responses:
        101:
          description: Switching Protocols
        111:
          schema:
            type: array
          description: 'Receiving messages have 2 stages: <br> You are receiving generations chunks:'
          examples:
            application/json:
              [
                {
                  "type": "chat_message_chunk",
                  "chat_id": 1,
                  "created_at": "2023-08-15 12:00:10.00000+00:00",
                  "request_id": 2,
                  "id": 3,
                  "message_chunk": "",
                  "owner_id": 100,
                  "status": "start"
                },
                {
                  "type": "chat_message_chunk",
                  "chat_id": 1,
                  "created_at": "2023-08-15 12:00:10.00000+00:00",
                  "request_id": 2,
                  "id": 3,
                  "message_chunk": "",
                  "owner_id": 100,
                  "status": "progress"
                }
              ]
        112:
          schema:
            type: array
          description: 'When generations is stop, you will take last message:'
          examples:
            application/json:
              [
                {
                  "type": "chat_message_chunk",
                  "chat_id": 19,
                  "created_at": "2023-08-15 12:00:10.00000+00:00",
                  "request_id": 340,
                  "id": 341,
                  "message_chunk": ".",
                  "owner_id": 100,
                  "status": "done"
                }
              ]
        '400':
          description: 'Possible errors in response'
          examples:
            application/json:
              {
                "errors": {
                  "details": [
                    "Not request method.",
                    "Prompt is empty.",
                    "This field is required.",
                    "Chat is not available",
                    "Agent is not exists",
                    "send_type is not correct"
                  ]
                }
              }
        '403':
          description: '403 Access denied'
      tags:
        - websocket
  /chats/:
    get:
      summary: Get all the chats
      description: 'Get all the chats. The chats will be filtered by user, who make request.'
      security:
        - Bearer: [ ]
      responses:
        '200':
          description: 'The answer will be all the users chats'
          schema:
            $ref: '#/definitions/ChatModel'
          examples:
            application/json:
              [
                {
                  "id": 1,
                  "latest_message": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
                  "name": "ChatName1",
                  "created_at": "2023-06-19T16:28:47.904000Z",
                  "updated_at": "2023-06-19T16:32:33.773000Z",
                  "owner_id": 1,
                  "addressee_id": 2
                },
                {
                  "id": 2,
                  "latest_message": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
                  "name": "ChatName2",
                  "created_at": "2023-06-19T16:28:47.904000Z",
                  "updated_at": "2023-06-19T16:28:47.955000Z",
                  "owner_id": 1,
                  "addressee_id": 2
                },
                {
                  "id": 3,
                  "latest_message": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
                  "name": "ChatName3",
                  "created_at": "2023-06-19T16:28:47.904000Z",
                  "updated_at": "2023-06-19T16:28:47.955000Z",
                  "owner_id": 1,
                  "addressee_id": 2
                }
              ]
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
      tags:
        - chats
    post:
      security:
        - Bearer: [ ]
      operationId: chats_create
      summary: Add a new chat
      parameters:
        - name: body
          in: body
          required: true
          description: 'Chats object that needs to be added:'
          type: object
          properties:
            owner_id:
              title: owner_id
              type: integer
              example: 1
            name:
              title: Name
              type: string
              maxLength: 200
              minLength: 1
              example: 'ChatName'
            addressee_id:
              title: addressee_id
              type: integer
              example: 1
      responses:
        '201':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/ChatModel'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "owner_id": [
                    "This field is required."
                  ],
                  "name": [
                    "This field is required."
                  ],
                  "addressee_id": [
                    "This field is required."
                  ]
                }
              }
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
      tags:
        - chats
    parameters: [ ]
  /chats/{id}/:
    get:
      security:
        - Bearer: [ ]
      operationId: chats_delete
      summary: 'Get a chat by ID'
      responses:
        '200':
          description: 'successful operation'
          examples:
            application/json:
              {
                "id": 1,
                "latest_message": "Message",
                "name": "Hello",
                "created_at": "2023-07-18T10:07:37.075051Z",
                "updated_at": "2023-07-18T10:07:37.075097Z",
                "owner_id": 1,
                "addressee_id": 2
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      security:
        - Bearer: [ ]
      operationId: chats_delete
      summary: 'Deletes a chat'
      responses:
        '200':
          description: 'successful operation'
          examples:
            application/json:
              {
                "message": "Chats delete successfully"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this chat.
          required: true
          type: integer
      tags:
        - chats
  /messages/:
    get:
      security:
        - Bearer: [ ]
      operationId: messages_list
      summary: Get all the messages
      description: 'Get all the messages. The messages will be filtered by user, who make request.'
      parameters:
        - name: chat_id
          in: query
          description: 'Get all the messages by chat. Only the owner of the chat will receive the messages'
          required: false
          type: string
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/MessageModel'
          examples:
            application/json:
              [
                {
                  "id": 1,
                  "message_text": "Hello",
                  "created_at": "2023-06-19T12:51:26.301069Z",
                  "chat_id": 1,
                  "owner_id": 1,
                  "request_id": null,
                  "addressee_id": 105
                },
                {
                  "id": 2,
                  "message_text": "Hello. Can I help you?",
                  "created_at": "2023-06-19T12:51:26.301069Z",
                  "chat_id": 1,
                  "owner_id": 2,
                  "request_id": 2,
                  "addressee_id": null
                }
              ]
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
      tags:
        - messages
    post:
      operationId: messages_create
      summary: Create new message
      description: 'The user creates a message, and then receives a response from nlp.'
      security:
        - Bearer: [ ]
      parameters:
        - name: body
          description: 'Message object that needs to be added'
          in: body
          required: true
          schema:
            type: object
            properties:
              message_text:
                title: Message text
                type: string
                maxLength: 200
                minLength: 1
                example: Hello, how are you?
              chat_id:
                title: chat_id
                type: integer
                example: 1
              owner_id:
                title: owner_id
                type: integer
                example: 1
              addressee_id:
                title: addressee_id
                type: integer
                example: 1
      responses:
        '201':
          description: 'The message will return with a ready answer to the question'
          schema:
            $ref: '#/definitions/MessageModel'
          examples:
            application/json:
              {
                "id": 2,
                "message_text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
                "created_at": "2023-09-25T12:07:09.647553Z",
                "chat_id": 1,
                "owner_id": 101,
                "request_id": null,
                "addressee_id": 105
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "chat_id": [
                    "This field is required."
                  ],
                  "owner_id": [
                    "This field is required."
                  ],
                  "message_text": [
                    "This field is required."
                  ],
                }
              }
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
      tags:
        - messages
    parameters: [ ]
  /messages/{id}/:
    get:
      operationId: messages_read
      summary: Get message by ID
      description: 'You will receive information about this message'
      security:
        - Bearer: [ ]
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MessageModel'
          examples:
            application/json:
              {
                "id": 2,
                "message_text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
                "created_at": "2023-09-25T12:07:09.647553Z",
                "chat_id": 1,
                "owner_id": 101,
                "request_id": null,
                "addressee_id": 105
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - messages
    delete:
      security:
        - Bearer: [ ]
      operationId: messages_delete
      summary: 'Deletes a message'
      responses:
        '200':
          description: 'successful operation'
          examples:
            application/json:
              {
                "message": "Message deletes successfully"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - messages
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this message.
        required: true
        type: integer
  /register/:
    post:
      operationId: register_create
      description: ''
      summary: 'To register a user'
      parameters:
        - name: body
          in: body
          required: true
          description: 'To register a user, you need the following information. username becomes the same as the user id.'
          schema:
            $ref: '#/definitions/Register'
      responses:
        '201':
          description: 'User Created Successfully'
          schema:
            $ref: '#/definitions/TokenRefresh'
          examples:
            application/json:
              {
                "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjg2ODM2Mjg2LCJpYXQiOjE2ODY4MzI2ODYsImp0aSI6ImI0OWQyZDE5NzgwZTQ3Y2M5MzJjZmJlMzZmN2UyMjI2IiwidXNlcl9pZCI6NH0.VQjwSsOuBD8UDlu966e-N3RlBZEJpWVt3rvSqg_oQGU"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "email": [
                    "Duplicate"
                  ],
                  "password": [
                    "This password is too short. It must contain at least 8 characters.",
                    "This password is too common.",
                    "This password is entirely numeric."
                  ]
                }
              }
      tags:
        - register
  /token/:
    post:
      operationId: token_create
      summary: 'Create a pair of tokens (access, refresh)'
      parameters:
        - name: body
          in: body
          required: true
          description: To create tokens, you need an email and password
          schema:
            type: object
            properties:
              email:
                type: string
                example: 'user@user.ru'
                pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
              password:
                type: string
                example: 'user'
      responses:
        '200':
          description: 'The answer will be new refresh and access tokens'
          schema:
            type: object
            properties:
              access:
                type: string
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "details": [
                    "Incorrect email or password"
                  ],
                  "email": [
                    "This field is required."
                  ],
                  "password": [
                    "This field is required."
                  ]
                }
              }
      tags:
        - token
    parameters: [ ]
  /token/refresh/:
    post:
      operationId: token_refresh_create
      summary: Refresh JWT
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      responses:
        '200':
          description: 'The answer will be refresh access and refresh tokens'
          schema:
            type: object
            properties:
              access:
                type: string
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "details": [
                    "Refresh is None"
                  ]
                }
              }
      tags:
        - token
    parameters: [ ]

  /agents/:
    get:
      security:
        - Bearer: [ ]
      operationId: agents_list
      summary: Get all the agents
      parameters:
        - in: query
          name: is_user
          type: boolean
          description: Filter by User Agent
        - in: query
          name: is_nlp_model
          type: boolean
          description: Filter by NLP Model Agent
      description: 'Get all the agents'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              [
                {
                  "id": 113,
                  "name": "GPT-4-8k",
                  "created_at": "2023-09-01T10:48:03.037402Z",
                  "updated_at": "2023-09-01T10:48:03.037402Z",
                  "is_active": true,
                  "user": null,
                  "nlp_model": 3
                },
                {
                  "id": 114,
                  "name": "GPT-4-32k",
                  "created_at": "2023-09-01T10:48:03.050403Z",
                  "updated_at": "2023-09-01T10:48:03.050403Z",
                  "is_active": true,
                  "user": null,
                  "nlp_model": 4
                }
              ]
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
      tags:
        - agents

  /profiles-model/:
    get:
      security:
        - Bearer: [ ]
      operationId: profiles-model_list
      summary: Get all the nlp_models profiles
      description: 'Get all the nlp_models profiles'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              [
                {
                  "id": 2,
                  "price_per_token": "0.00000",
                  "description": "string",
                  "avatar": null,
                  "nlp_model": 2
                },
                {
                  "id": 1,
                  "price_per_token": "0.00000",
                  "description": "string",
                  "avatar": null,
                  "nlp_model": 2
                },
              ]
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
      tags:
        - profiles_nlp_models

  /nlp-models/:
    get:
      security:
        - Bearer: [ ]
      operationId: nlp_models_list
      summary: Get all the nlp_models
      description: 'Get all the nlp_models'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              [
                {
                  "id": 1,
                  "title": "GPT-3.5-turbo-4k",
                  "created_at": "2023-09-29T10:48:03.011402Z",
                  "updated_at": "2023-09-29T10:48:03.012403Z"
                },
                {
                  "id": 2,
                  "title": "GPT-3.5-turbo-16k",
                  "created_at": "2023-09-29T10:48:03.024403Z",
                  "updated_at": "2023-09-29T10:48:03.025401Z"
                },
              ]
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
      tags:
        - nlp_models

  /profiles_user/:
    get:
      summary: Get all the profiles user
      security:
        - Bearer: [ ]
      description: Get, Update user profile
      parameters: [ ]
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/ProfileUser'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
      tags:
        - profiles_user
    parameters: [ ]
  /profile_user/:
    get:
      summary: Get user profile
      security:
        - Bearer: [ ]
      description: Get user agents
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/ProfileUser'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - profiles_user
    parameters: [ ]
  /profiles_user/{id}/:
    get:
      summary: Get user profile by ID
      security:
        - Bearer: [ ]
      description: Get, Update user profile
      parameters: [ ]
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProfileUser'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - profiles_user
    patch:
      security:
        - Bearer: [ ]
      summary: Edit user profile by ID
      description: Get, Update user profile
      parameters:
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              first_name:
                type: string
                example: 'FirstLorem'
                pattern: '^[^@$%&*#!?()№;~:]+$'
              last_name:
                type: string
                example: 'SecondLorem'
                pattern: '^[^@$%&*#!?()№;~:]+$'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              {
                "user_id": 1,
                "first_name": "first_name",
                "last_name": "last_name",
                "avatar": "/media/avatars/1.jpg"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "first_name": [
                    "This field may not be blank."
                  ],
                  "last_name": [
                    "Ensure this field has no more than 32 characters."
                  ]
                }
              }
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - profiles_user
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this profile.
        required: true
        type: integer
  /profiles_user/{id}/avatar/:
    patch:
      security:
        - Bearer: [ ]
      summary: Edit user profile by ID
      description: Update user profile avatar
      parameters:
        - in: formData
          name: avatar
          type: file
          description: The Picture to upload.
      responses:
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - profiles_user
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this profile.
        required: true
        type: integer



  /users/:
    get:
      security:
        - Bearer: [ ]
      operationId: users_list
      summary: Get all the users
      description: Get users information
      parameters: [ ]
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/UserModel'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
      tags:
        - users
    parameters: [ ]
  /user/:
    get:
      security:
        - Bearer: [ ]
      operationId: user
      summary: 'Get information about this user'
      description: 'Get information by token auth'
      parameters: [ ]
      responses:
        '200':
          description: ''
          examples:
            application/json:
              {
                "id": 1,
                "last_login": "2023-06-20T09:42:29.574365Z",
                "username": "Id[]102",
                "email": "user@user.ru",
                "is_email_confirmed": true,
                "created_at": "2023-06-15T05:49:49.249000Z",
                "updated_at": "2023-06-19T13:51:45.871000Z"
              }
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
      tags:
        - users
    parameters: [ ]
  /users/{id}/:
    get:
      summary: Get user by ID
      security:
        - Bearer: [ ]
      operationId: users_read
      description: Get, Update user information
      parameters: [ ]
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/UserModel'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - users
    patch:
      security:
        - Bearer: [ ]
      operationId: users_update
      description: Get, Update user information
      summary: Edit user by ID
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserModel'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/UserModel'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "username": [
                    "Incorrect username"
                  ]
                }
              }
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - users
    delete:
      security:
        - Bearer: [ ]
      summary: Delete user by ID
      operationId: users_delete
      description: Get, Update user information
      parameters: [ ]
      responses:
        '200':
          description: 'Successful'
          examples:
            application/json:
              'message': 'User inactive successfully'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - users
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this user.
        required: true
        type: integer
  /change-password/:
    put:
      operationId: change-password_update
      description: An endpoint for changing password.
      summary: To change password
      security:
        - Bearer: [ ]
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangePassword'
      responses:
        '200':
          description: 'Successful password change'
          examples:
            application/json:
              {
                "message": "Password updated successfully"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "old_password": [
                  "This field is required."
                ],
                "new_password": [
                  "This field is required."
                ]
              }
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
      tags:
        - change password
    parameters: [ ]
  /logout/:
    post:
      security:
        - Bearer: [ ]
      operationId: logout
      summary: An endpoint to logout users.
      description: |-
        Add JWT to blacklist
      responses:
        200:
          description: Successful operation
          examples:
            application/json:
              {
                'message': 'Logout successfully',
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
      tags:
        - logout
    parameters: [ ]
  /password-reset/:
    post:
      operationId: password_reset_create
      summary: Creates a Password Reset Token
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Email'
      responses:
        '200':
          description: 'Successful operations'
          examples:
            application/json:
              {
                "status": "OK"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "email": [
                    "This field is required."
                  ]
                }
              }
      tags:
        - password-reset
    parameters: [ ]
  /password-reset/confirm/:
    post:
      operationId: password_reset_confirm_create
      summary: An Api View which provides a method to reset a password based on a unique token
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/PasswordToken'
      responses:
        '200':
          description: 'Successful operations'
          examples:
            application/json:
              {
                "status": "OK"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "password": [
                    "This field is required."
                  ],
                  "token": [
                    "This field is required."
                  ]
                }
              }
        404:
          description: Not found.
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - password-reset
    parameters: [ ]
  /password-reset/validate_token/:
    post:
      operationId: password-reset_validate_token_create
      summary: An Api View which provides a method to verify that a token is valid
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResetToken'
      responses:
        '200':
          description: 'Successful operations'
          examples:
            application/json:
              {
                "status": "OK"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "token": [
                    "This field is required."
                  ]
                }
              }
        404:
          description: Not found.
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - password-reset
    parameters: [ ]
  /confirmation-email/confirm/:
    post:
      operationId: confirmation-email_confirm_create
      summary: 'Email Confirmation'
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConfirmEmail'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              {
                "status": "OK"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
          examples:
            application/json:
              {
                "errors": {
                  "email_confirm_token": [
                    "This field is required."
                  ]
                }
              }
        404:
          description: Not found.
          schema:
            $ref: '#/definitions/NotFound'
      tags:
        - confirmation-email
    parameters: [ ]
  /confirmation-email/send/:
    post:
      security:
        - Bearer: [ ]
      operationId: confirmation-email_send_create
      summary: 'Sending a confirmation email. Creating a token in the database'
      description: 'You dont need any parameters, only authorization'
      responses:
        '201':
          description: ''
          examples:
            application/json:
              {
                "status": "OK"
              }
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/BadRequest'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/TokenNotValid'
      tags:
        - confirmation-email
    parameters: [ ]
definitions:
  ChatModel:
    required:
      - user_id
      - name
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
        example: 1
      latest_message:
        title: Last Message
        type: string
        maxLength: 1000
        minLength: 1
        example: 'This is message'
      name:
        title: Name
        type: string
        maxLength: 200
        minLength: 1
        example: 'ChatName'
      created_at:
        title: Created at
        type: date
        example: "2023-06-23T09:15:34.562981Z"
      updated_at:
        title: Created at
        type: date
        example: "2023-06-23T09:15:34.562981Z"
      owner_id:
        title: owner_id
        type: integer
        example: 1
      addressee_id:
        title: addressee_id
        type: integer
        example: 1
  MessageModel:
    required:
      - message_text
      - chat_id
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
        example: 1
      message_text:
        title: Message text
        type: string
        maxLength: 200
        minLength: 1
        example: message_text
      answer_text:
        title: Answer text
        type: string
        maxLength: 200
        example: answer_text
      chat_id:
        title: chat_id
        type: integer
        example: 1
  Register:
    required:
      - email
      - password
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      email:
        title: Email
        type: string
        format: email
        minLength: 1
        pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
      password:
        title: Password
        type: string
        maxLength: 128
        minLength: 1
        description: >-
          Password parameters: <br>
          Validate whether the password is of a minimum length 8. <br>
          Checks whether the password occurs in a list of common passwords. By default, it compares to an included list of 20,000 common passwords. <br>
          Checks whether the password isn’t entirely numeric.
  CustomTokenObtainPair:
    required:
      - email
      - password
    type: object
    properties:
      email:
        title: Email
        type: string
        minLength: 1
      password:
        title: Password
        type: string
        minLength: 1
        description: >-
          Password parameters: <br>
          Validate whether the password is of a minimum length 8. <br>
          Checks whether the password occurs in a list of common passwords. By default, it compares to an included list of 20,000 common passwords. <br>
          Checks whether the password isn’t entirely numeric.
  TokenRefresh:
    required:
      - refresh
    type: object
    properties:
      access:
        title: Access
        type: string
        readOnly: true
        minLength: 1
  ChangePassword:
    required:
      - old_password
      - new_password
    type: object
    properties:
      old_password:
        title: Old password
        type: string
        minLength: 1
        example: 'old_pas'
      new_password:
        title: New password
        type: string
        minLength: 1
        example: 'new_pas'
        description: >-
          Password parameters: <br>
          Validate whether the password is of a minimum length 8. <br>
          Checks whether the password occurs in a list of common passwords. By default, it compares to an included list of 20,000 common passwords. <br>
          Checks whether the password isn’t entirely numeric.
  TokenNotValid:
    type: object
    properties:
      errors:
        title: Details
        type: string
        minLength: 1
        example:
          "details": [ "Authentication credentials were not provided." ]

  Forbidden:
    type: object
    properties:
      errors:
        title: Details
        type: string
        minLength: 1
        example:
          "details": [ "Available only for the owner" ]
  NotFound:
    required:
      - errors
    type: object
    properties:
      errors:
        title: errors
        type: array
        items:
          type: object
        example:
          "details": [ "Not found." ]
  BadRequest:
    required:
      - errors
    type: object
    properties:
      errors:
        title: errors
        type: array
        items:
          type: object
        example:
          "details": [ "Bad Request." ]
  UserModel:
    required:
      - username
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
        example: 1
      username:
        title: Username
        type: string
        maxLength: 255
        minLength: 1
        example: 'user'
        pattern: '^(?!_$)(?![-.])(?!.*[_.-]{2})[a-zA-Z0-9_.-]+(?<![.-])$'
  ProfileUser:
    type: object
    properties:
      user_id:
        title: User_id
        type: integer
        example: 1
      first_name:
        title: First name
        type: string
        maxLength: 32
        minLength: 1
        example: 'LoremName'
        pattern: '^[a-zA-Z_.-][^0-9_!¡?÷?¿/\\+=@#$%ˆ&*(){}|~<>;:[\]]{2,}$'
      last_name:
        title: Last name
        type: string
        maxLength: 32
        minLength: 1
        example: 'LoremSName'
        pattern: '^[a-zA-Z_.-][^0-9_!¡?÷?¿/\\+=@#$%ˆ&*(){}|~<>;:[\]]{2,}$'
      avatar:
        title: Avatar
        type: file
        example: 'http://127:0:0:1:8000/media/avatars/id102-:bird.jpeg'
  Email:
    required:
      - email
    type: object
    properties:
      email:
        title: Email
        type: string
        format: email
        minLength: 1
        pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
  PasswordToken:
    required:
      - password
      - token
    type: object
    properties:
      password:
        title: Password
        type: string
        minLength: 1
        description: >-
          Password parameters: <br>
          Validate whether the password is of a minimum length 8. <br>
          Checks whether the password occurs in a list of common passwords. By default, it compares to an included list of 20,000 common passwords. <br>
          Checks whether the password isn’t entirely numeric.
      token:
        title: Token
        type: string
        minLength: 1
  ResetToken:
    required:
      - token
    type: object
    properties:
      token:
        title: Token
        type: string
        minLength: 1
  ConfirmEmail:
    required:
      - email_confirm_token
    type: object
    properties:
      email_confirm_token:
        title: Email confirm token
        type: string
        minLength: 1
        example: 'bcf576eeeaa48a5811cebc88'
